prueba <- xpathSApply(html2, "//td[@id='col-citedby']", xmlValue)
prueba
html2["//a[@class='gsc_a_ac']", fun = xmlValue]
library(magrittr)
prueba <- xpathApply(html2, "//td[@id='col-citedby']", xmlValue)
prueba
html2["//a[@class='gsc_a_ac']", fun = xmlValue]
html2 <- htmlParse(urlfile, useInternalNodes = FALSE)
prueba <- xpathSApply(html2, "//td[@id='col-citedby']", xmlValue)
html2["//a[@class='gsc_a_ac']", fun = xmlValue]
xpathSApply(html2, "//title", xmlValue) ## me da el titulo de la pag
html2 <- htmlParse(urlfile, useInternalNodes = TRUE)
xpathSApply(html2, "//title", xmlValue) ## me da el titulo de la pag
html2["//a[@class='gsc_a_ac']", fun = xmlValue]
prueba <- xpathSApply(html2, "//td[@id='col-citedby']", xmlValue)
prueba
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html2 = GET(url)
content2 = content(html2, as="text")
parsedHTML = htmlParse(content2, asText = TRUE)
parsedHTML = htmlParse(content2, asText xpathSApply(parsedHTML, "//title", xmlValue)
xpathSApply(parsedHTML, "//title", xmlValue)
xpathSApply(parsedHTML, "//span[@class='gsc_g_al']", xmlValue)
xpathSApply(parsedHTML, "//td[@class='gsc_a_c']", xmlValue)
xpathSApply(parsedHTML, "//td[@id='col-citedby']", xmlValue)
html <-htmlTreeParse(urlfile, useInternalNodes = TRUE, encoding="UTF-8") ## cuidado uso htmlTreeParse y no xml
xpathSApply(html, "//title", xmlValue) ## me da el titulo de la pag
html2["//a[@class='gsc_a_ac']", fun = xmlValue]
html["//a[@class='gsc_a_ac']", fun = xmlValue]
prueba <- xpathSApply(html2, "//td[@class='gsc_a_c']", xmlValue)
prueba <- xpathSApply(html, "//td[@class='gsc_a_c']", xmlValue)
prueba
xpathSApply(parsedHTML, "//td[@class='gsc_a_c']", xmlValue) ## funciona bien
xpathSApply(parsedHTML, "//td[@class='gsc_a_c']", xmlValue) ## funciona bien
xpathSApply(parsedHTML, "//span[@class='gsc_g_al']", xmlValue) ## funciona bien
xpathSApply(parsedHTML, "//span", xmlValue)
xpathSApply(parsedHTML, "//span@class", xmlValue)
xpathSApply(parsedHTML, "//td", xmlValue)
xpathSApply(parsedHTML, "//div", xmlValue)
xpathSApply(parsedHTML, "//span[@class]", xmlValue)
xpathSApply(parsedHTML, "//span[@class=]", xmlValue)
xpathSApply(parsedHTML, "//span[@class='']", xmlValue)
xpathSApply(parsedHTML, "//span[@class='cited']", xmlValue)
xpathSApply(parsedHTML, "//td[@id='cited']", xmlValue)
xpathSApply(parsedHTML, "//td[@id]", xmlValue)
xpathSApply(parsedHTML, "//td[@class]", xmlValue)
xpathSApply(parsedHTML, "//td[@class='h-index']", xmlValue)
xpathSApply(parsedHTML, "//td[@class='a']", xmlValue)
prueba2 <- xpathSApply(html, "//span[@class='gsc_g_al']", xmlValue)
prueba2
#para extraer datos de paginas, veo el codigo fuente y lo cargo con
fileURL2 <- getURL("https://www.espn.com/nfl/team/stats/_/name/bal/batimore-ravens")
teams <- xpathSApply(doc, "//li[@class='Links']", xmlValue) #nunca funciono
teams <- xpathSApply(doc, "//li[@class='LegalFooter__Links__Item nowrap relative LegalFooter__Link--underline-hover']", xmlValue) #nunca funciono
teams <- xpathSApply(doc, "//li[@class='LegalFooter__Links__Item nowrap relative LegalFooter__Link--underline-hover']", xmlValue) #nunca funciono
teams
doc <- htmlTreeParse(fileURL2, useInternalNodes = TRUE, encoding="UTF-8")
xpathSApply(doc, "//title", xmlValue)
xpathSApply(doc, "//link", xmlValue)
scores <- xpathSApply(doc, "//a[@class='AnchorLink']", xmlValue) #busco elementos particulares que tengan score
scores #no hay datos
players <- xpathSApply(doc, "//a[@class='AnchorLink']", xmlValue) #busco elementos particulares que tengan score
players #no hay datos
statics <- xpathSApply(doc, "//div[@class=]", xmlValue)
statics <- xpathSApply(doc, "//div[@class]", xmlValue)
statics
xpathSApply(doc, "//span[@class='result']", xmlValue)
xpathSApply(doc, "//option[@class]", xmlValue)
myapp = oauth_app("twitter", key = "wSRgflYTTc3UW2WdhEKAHrAQ7", secret =  "eO70NisBtHw6WYNJxuyyfMNfThZ3LrgHFFCH7LMDtFGSI0doJv")
sig = sign_oauth1.0(myapp, token = "1062411277081985025-805oDPdYbq07Q7HOFMKmPUpjlAngq7", token_secret = "lpQgMa19EM9XLbhWOJlfYZpkPPoQPH4Qg7qwgUEcDnuPC")
## me conecto a la API
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
library(jsonlite)
json1 = content(homeTL)
json1
##siguiendo tutoral de API twitter
Sys.setenv(BEARER_TOKEN = "AAAAAAAAAAAAAAAAAAAAADRycAEAAAAAhRGtmI%2FF2kVriwuBOh6rerKDdDw%3DjkA4hiyShutKR20Bgg52PO8kUm9x2UitlA73CXrEdMPwcOLTWt")
bearer_token <- Sys.getenv("$BEARER_TOKEN")
headers <- c(`Authorization` = sprintf('Bearer %s', bearer_token))
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json1
params <- list(`user.fields` = 'description', `expansions` = 'pinned_tweet_id')
handle <- readline('$USERNAME')
sprintf('https://api.twitter.com/2/users/by?usernames=%s', handle)
url_handle <- sprintf('https://api.twitter.com/2/users/by?usernames=%s', handle)
response <- GET(url = url_handle, add_headers(.headers = headers), query = params)
obj <- httr::content(response, as = "text")
print(obj)
library(swirl)
swirl
swirl()
swirl()
x <- data.frame("var1"= sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
x
x <- x[sample(1:5), ] ; x$var2[c(1,3)] =NA
x
#subset una columna
x[,1]
#subset una columna por nombre de variable
x[,'var1']
#subset las dos primeras filas de la columna var 2
x[1:2, 'var2']
#subset estableciendo condiciones
x[(x$var1 <=3 & x$var3 >11), ]
x[(x$var1 <=3 | x$var3 >11), ]
# si uso el comando which no cuenta los NA
x[which(x$var1 <=3 & x$var3 >11), ]
# si uso el comando which no cuenta los NA
x[which(x$var3 >11), ]
# ORDENAR sort comand
sort(x$var1)
sort(x$var1, decreasing = TRUE)
sort(x$var2, decreasing = TRUE, na.last = TRUE)
#puedo ordenar un data frmae entro por una variable, con el comando order
x[order(x$var1), ]
x[order(x$var1, x$var2), ]
install.packages("plyr")
#tambien puedo usar el paquete plyr
library(plyr)
arrange(x, var1)
arrange(x, desc(var1))
#agregar columnas a un data frame
x$var4 <- rnorm(5)
x
y <- cbind(X, c(25:30))
y <- cbind(x, c(25:30))
y <- cbind(x, c(25:29))
y
#rbind para agregar filas
y <- rbind(rnomr(5), y)
#rbind para agregar filas
y <- rbind(rnom(5), y)
#rbind para agregar filas
y <- rbind(rnorm(5), y)
y
#rbind para agregar filas
y <- rbind(c(12:16), y)
y
datos <- read.csv("/home/anita/DataScience/RdataScience/3.GettingClearingData/restaurants.csv", header = TRUE, sep = ",")
head(datos)
tail(datos)
head(datos, n=4)
summary(datos)
str(datos)
quantile(datos$councilDistrict, na.rm = TRUE)
quantile(datos$policeDistrict, probs = c(0.5,0.75,0.9))
quantile(datos$councilDistrict, probs = c(0.5,0.75,0.9))
table(datos$zipCode, useNA = "ifany")
table(datos$councilDistrict, datos$zipCode)
table(datos$councilDistrict, datos$zipCode, useNA = "ifany")
table(datos$councilDistrict, datos$zipCode)
#detectar na. is na devuelve 1 si es y 0 si no es na. si sumo is.na tengo el total de na en cada columna
sum(is.na(datos$councilDistrict))
any(is.na(datos$councilDistrict))
all(datos$councilDistrict >0)
all(datos$zipCode >0)
#sumar columnas o filas. esto me simplifica saber si hay na en e data frame general
colSums(is.na(datos))
#ver si hay determinados valores en mi data
table(datos$zipCode %in% c("21212"))
table(datos$zipCode %in% c("21212", "13453", "21213"))
#puedo subset mi data
datos[datos$zipCode %in% c("21212")]
#puedo subset mi data
datos[datos$zipCode %in% c("21212"), ]
data("UCBAdmissions")
DF = as.data.frame(UCBAdmissions)
summary(DF)
#cross tabs me permite extraer datos cruzados
xt <- xtabs(Freq ~ Gender + Admit, data = DF)
xt
#otro ejemplo
data("warpbreaks")
DF = as.data.frame(warpbreaks)
head(DF)
tail(DF)
xt <- xtabs(breaks ~. , data = DF)
xt
DF$replicates <- rep(1:9, len = 54)
head(DF)
tail(DF)
xt <- xtabs(breaks ~. , data = DF)
xt
ftable(xt) #creo una tabla uiendo todos los valores de xt
## CREATING NEW VARIABLES
#uso los datos de restaurantes de baltimore como ejemplo
head(datos)
x
#crear una secuencia, indice que me permita recorrer valores de una variable
x <- rnorm(10)
seq(along = x)
# creo una variable en la data de restaurantes que me diga si los rest estan cerca de algo, por ejemplo
datos$cercade <- datos$neighborhood %in% c("Roland Park", "Homeland")
table(datos$cercade)
#ejemplo2: detectar codigo postal incorrecto (si son segativos por ejemplo)
datos$zipWrong <- ifelse(datos$zipCode <0, TRUE, FALSE)
table(datos$zipWrong)
#hacer variables categoricas, por ejemplo dividir los zipcode en rangos p grups
datos$zipGroups <- cut(datos$zipCode, breaks = quantile(datos$zipCode))
table(datos$zipGroups)
install.packages(Hmisc)
install.packages("Hmisc")
#esto es mas facil con la libreria Hmisc
library(Hmisc)
ary(Hmisc)
datos$zipGroups <- cut2(datos$zipCode, g=4) #me da el mismo resutado
table(datos$zipGroups)
#crear variables factors
datos$zipFactor <- factor(datos$zipCode)
datos$zipFactor
datos$zipFactor[1:10] #ver solo 10 valores
calss(datos$zipFactor)
class(datos$zipFactor)
install.packages("reshape2")
## Reshaping DATA
library(reshape2)
head(mtcars)
#melting data frames
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars, id=c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
carMelt
#dcats function - transforma mi data en otro data rame con parametros que quiera
#extraigo datos de los cylindros de los auos
cylData <- dcast(carMelt, cyl ~ variable) ; cylData
cylData <- dcast(carMelt, cyl ~ variable, mean) ; cylData #le pido que para cada cilidrada me de el promedio de las variables
#calculando y tomando valores medio - data insectspray
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spIns <- split(InsectSprays$count, InsectSprays$spray) ; spIns
lapply(spIns, sum)
spCount <- lapply(spIns, sum)
unlist(spCount)
ddply(InsectSprays, .(spray), summarize, sum = sum(count))
#tambien puedo usar el paquete plyr
library(plyr)
ddply(InsectSprays, .(spray), summarize, sum = sum(count))
?ddply
ddply(InsectSprays, .(spray), summarise, sum = sum(count)) ## no fuciona
#crear una nueva variable con ddply
spraySums <- ddply(InsectSprays, .(spray), summarise, sum=ave(count, FUN=sum))
head(spraySums)
tail(spraySums)
#verbos o acciones dentro del paquete: select, filter, arrange, rename, mutate, summarise
#el primer argumento siempre es un DF
#el resultado es otro daa frame
chicago <- readRDS("/home/anita/DataScience/RdataScience/3.GettingClearingData/chicago.rds")
head(select(chicago, 1:5))
#verbos o acciones dentro del paquete: select, filter, arrange, rename, mutate, summarise
#el primer argumento siempre es un DF
#el resultado es otro daa frame
library(dplyr)
head(select(chicago, 1:5))
names(chicago)[1:3]
head(select(chicago, city:dptp)) #puedo seleccionar columnas por sus nombres
head(select(chicago, -(city:dptp))) #puedo sacar algunas columnas de mi seleccion
i <- match("city", names(chicago))
j <- match("dptp", names(chicago))
head(chicago[, -(i:j)])
#filter
chic.f <- filter(chicago, pm25tmean2 > 30) #filtro todos los valores que esa variable es mayor que 30
head(select(chic.f, 1:3, pm25tmean2), 10)
chic.f <- filter(chicago, pm25tmean2 > 30 & tmpd > 80)
head(select(chic.f, 1:3, pm25tmean2, tmpd), 10)
#arrange
chicago <- arrange(chicago, date) #ordenar los datos basados en los datos de una columna
head(select(chicago, date, pm25tmean2), 3)
tail(select(chicago, date, pm25tmean2), 3)
chicago <- arrange(chicago, desc(date)) #ordenar en descendent
head(select(chicago, date, pm25tmean2), 3)
tail(select(chicago, date, pm25tmean2), 3)
#rename
chicago <- rename(chicago, dewpoint = dptp, pm25 = pm25tmean2)
head(chicago[, 1:5], 3)
#mutate
chicago <- mutate(chicago, pm25detrend=pm25-mean(pm25, na.rm=TRUE))
head(select(chicago, pm25, pm25detrend))
#group by - permite dividir un DF en agunas variables
chicago <- mutate(chicago,
tempcat = factor(1 * (tmpd > 80),
labels = c("cold", "hot"))) #creo una variable categoriga de temperatura que mida si fue caliente o no dependiendo de la temp del dia
hotcold <- group_by(chicago, tempcat)
summarize(hotcold, pm25 = mean(pm25, na.rm = TRUE),
o3 = max(o3tmean2),
no2 = median(no2tmean2))
chicago <- mutate(chicago,
year = as.POSIXlt(date)$year + 1900)
years <- group_by(chicago, year)
summarize(years, pm25 = mean(pm25, na.rm = TRUE),
o3 = max(o3tmean2, na.rm = TRUE),
no2 = median(no2tmean2, na.rm = TRUE))
## %>% me permite escribir todo de una forma legible
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1)
%>% group_by(month)
## %>% me permite escribir todo de una forma legible
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1) %>% group_by(month) %>% summarize(pm25 = mean(pm25, na.rm = TRUE),
o3 = max(o3tmean2, na.rm = TRUE),
no2 = median(no2tmean2, na.rm = TRUE))
setwd("/home/anita/DataScience/RdataScience/4.EDA/proyFinal")
# load packages
library(dplyr)
library(ggplot2)
library(RColorBrewer)
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
View(SCC)
str(SCC)
# Subset motor vehicle sources related NEI data
motorVehicles <- grepl("vehicles", SCC$SCC.Level.Two, ignore.case=TRUE)
str(SCC$Data.Category)
levels(SCC$Data.Category)
morotVehicles <- filter(motorVehicles, Data.Category = "Onroad")
motorVehiclesSCC <- SCC[motorVehicles,]$SCC
motorVehiclesNEI <- NEI[NEI$SCC %in% motorVehiclesSCC,]
View(motorVehiclesNEI)
unique(motorVehiclesNEI$type)
data <- motorVehiclesNEI %>% group_by(year) %>% summarize(Emissions = sum(Emissions,na.rm = TRUE))
View(data)
data <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
View(data)
#plot 1 in ggplot2 system
qplot(factor(year), Emissions, fill = year, data = data) + geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM25 related to motor vehicles in Baltmore")
#plot 1 in ggplot2 system
qplot(factor(year), Emissions, fill = year, data = data) + geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM25 related to motor vehicles in Baltimore")
#plot 1 in ggplot2 system
qplot(factor(year), Emissions, fill = Emissions, data = data) + geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM25 related to motor vehicles in Baltimore")
#plot 1 in ggplot2 system
qplot(factor(year), Emissions, fill = year, data = data) + geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM25 related to motor vehicles in Baltimore")
dev.copy(png, file = "plot5.png")
dev.off()
#plot 1 in ggplot2 system
qplot(factor(year), Emissions, fill = year, data = data) + geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM2.5 related to coal combustion")
# Subset coal combustion related NEI data
combustion <- grepl("comb", SCC$SCC.Level.One, ignore.case=TRUE)
coal <- grepl("coal", SCC$SCC.Level.Four, ignore.case=TRUE)
coalComb <- (combustion & coal)
combustionSCC <- SCC[coalComb,]$SCC
combustionNEI <- NEI[NEI$SCC %in% combustionSCC,]
data <- combustionNEI %>%  group_by(year) %>% summarize(Emissions = sum(Emissions,na.rm = TRUE))
#plot 1 in ggplot2 system
qplot(factor(year), Emissions, fill = year, data = data) + geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM2.5 related to coal combustion")
dev.copy(png, file = "plot4.png")
dev.off()
data <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
#plot 1 in ggplot2 system
qplot(factor(year), Emissions, fill = year, data = data) + geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM2.5 related to motor vehicles in Baltimore")
data <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510" & "06037") %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
?filter
data <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510" & fips == "06037") %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
View(data)
# Subset motor vehicle sources related NEI data
motorVehicles <- grepl("vehicles", SCC$SCC.Level.Two, ignore.case=TRUE)
motorVehiclesSCC <- SCC[motorVehicles,]$SCC
motorVehiclesNEI <- NEI[NEI$SCC %in% motorVehiclesSCC,]
data <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510" & fips == "06037") %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
data <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510", fips == "06037") %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
# Subset motor vehicle sources related NEI data
motorVehicles <- grepl("vehicles", SCC$SCC.Level.Two, ignore.case=TRUE)
motorVehiclesSCC <- SCC[motorVehicles,]$SCC
motorVehiclesNEI <- NEI[NEI$SCC %in% motorVehiclesSCC,]
SCC <- readRDS("./data/Source_Classification_Code.rds")
NEI <- readRDS("./data/summarySCC_PM25.rds")
fipsWanted <- c("24510", "06037")
data <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips %in% fipsWanted) %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
# Subset motor vehicle sources related NEI data
motorVehicles <- grepl("vehicles", SCC$SCC.Level.Two, ignore.case=TRUE)
motorVehiclesSCC <- SCC[motorVehicles,]$SCC
motorVehiclesNEI <- NEI[NEI$SCC %in% motorVehiclesSCC,]
fipsWanted <- c("24510", "06037")
data <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips %in% fipsWanted) %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
View(data)
dataBalti <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
View(dataBalti)
View(data)
dataLA <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
dataLA <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "06037") %>%group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
dataBalti <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>% group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
dataLA <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "06037") %>% group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
View(dataLA)
dataBalti <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>% group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE), fips = fips)
str(motorVehiclesNEI)
dataBalti <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>% group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE), fips = fips) %>%
select(fips, Emissions, year)
dataBalti <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>% group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE)) %>%
select(fips, Emissions, year)
dataBalti <- motorVehiclesNEI %>%   select(fips, Emissions, year) %>%
mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>% group_by(year) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
dataBalti <- motorVehiclesNEI %>%   select(fips, Emissions, year) %>%
mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
View(dataBalti)
dataBalti <- motorVehiclesNEI %>%
mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
dataLA <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
filter(fips == "06037") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
View(dataLA)
data <- rbind(dataBalti, dataLA)
View(data)
#plot 6 in ggplot2 system
qplot(factor(year), Emissions, fill = year, data = data, facets = .~fips) +
geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM2.5 related to motor vehicles in Baltimore")
levels(data$fips)
dataBalti <- motorVehiclesNEI %>%
# mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
dataLA <- motorVehiclesNEI %>%  mutate(fips =as.factor(fips) ) %>%
# filter(fips == "06037") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
data <- rbind(dataBalti, dataLA)
View(data)
View(dataLA)
dataBalti <- motorVehiclesNEI %>%
# mutate(fips =as.factor(fips) ) %>%
filter(fips == "24510") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
dataLA <- motorVehiclesNEI %>%
# mutate(fips =as.factor(fips) ) %>%
filter(fips == "06037") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE))
data <- rbind(dataBalti, dataLA)
View(data)
dataLA <- motorVehiclesNEI %>%
filter(fips == "06037") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE)) %>%
mutate(city = "Los Ángeles")
data <- rbind(dataBalti, dataLA)
View(data)
dataBalti <- motorVehiclesNEI %>%
filter(fips == "24510") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE)) %>%
mutate(city = "Baltimore")
dataLA <- motorVehiclesNEI %>%
filter(fips == "06037") %>% group_by(year, fips) %>%
summarize(Emissions = sum(Emissions,na.rm = TRUE)) %>%
mutate(city = "Los Ángeles")
data <- rbind(dataBalti, dataLA)
View(data)
#plot 6 in ggplot2 system
qplot(factor(year), Emissions, fill = year, data = data, facets = .~city) +
geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM2.5 related to motor vehicles in Baltimore")
#plot 6 in ggplot2 system
qplot(factor(year), Emissions, fill = year, data = data, facets = .~city) +
geom_bar(stat="identity") +
theme(legend.position="none") +
labs(x = "Year", y = "PM2.5 emissions") +
labs(title = "Total emissions of PM2.5 related to motor vehicles in Baltimore and Los Ángeles")
dev.copy(png, file = "plot6.png")
dev.off()
